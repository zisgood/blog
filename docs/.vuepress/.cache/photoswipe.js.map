{
  "version": 3,
  "sources": ["dep:photoswipe", "../../../src/js/util/util.js", "../../../src/js/util/dom-events.js", "../../../src/js/util/viewport-size.js", "../../../src/js/slide/pan-bounds.js", "../../../src/js/slide/zoom-level.js", "../../../src/js/slide/slide.js", "../../../src/js/gestures/drag-handler.js", "../../../src/js/gestures/zoom-handler.js", "../../../src/js/gestures/tap-handler.js", "../../../src/js/gestures/gestures.js", "../../../src/js/main-scroll.js", "../../../src/js/keyboard.js", "../../../src/js/util/css-animation.js", "../../../src/js/util/spring-easer.js", "../../../src/js/util/spring-animation.js", "../../../src/js/util/animations.js", "../../../src/js/scroll-wheel.js", "../../../src/js/ui/ui-element.js", "../../../src/js/ui/button-arrow.js", "../../../src/js/ui/button-close.js", "../../../src/js/ui/button-zoom.js", "../../../src/js/ui/loading-indicator.js", "../../../src/js/ui/counter-indicator.js", "../../../src/js/ui/ui.js", "../../../src/js/slide/get-thumb-bounds.js", "../../../src/js/core/eventable.js", "../../../src/js/slide/placeholder.js", "../../../src/js/slide/content.js", "../../../src/js/core/base.js", "../../../src/js/opener.js", "../../../src/js/slide/loader.js", "../../../src/js/photoswipe.js"],
  "sourcesContent": ["import d from \"../../../../node_modules/photoswipe/dist/photoswipe.esm.js\";export default d;", "/**\r\n  * Creates element and optionally appends it to another.\r\n  *\r\n  * @param {String} className\r\n  * @param {String|NULL} tagName\r\n  * @param {Element|NULL} appendToEl\r\n  */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Object} p1 Point\r\n * @param {Object} p2 Point\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Object} p1\r\n * @param {Object} p2\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {Number} val\r\n * @param {Number} min\r\n * @param {Number} max\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {Number} x\r\n * @param {Number|null} y\r\n * @param {Number|null} scale\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {DOMElement} el\r\n * @param {Number} x\r\n * @param {Number|null} y\r\n * @param {Number|null} scale\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {Element} el\r\n * @param {String} prop CSS property to animate\r\n * @param {Number} duration in ms\r\n * @param {String|NULL} ease CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode();\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {Event} e\r\n */\r\nexport function specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {Element|NodeList|String} option\r\n * @param {String|null} legacySelector\r\n * @param {Element|null} parent\r\n * @returns Element[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * @param {*} v\r\n * @returns Boolean\r\n */\r\nexport function isClass(fn) {\r\n  return typeof fn === 'function' && /^\\s*class\\s+/.test(fn.toString());\r\n}\r\n", "// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {DOMElement} target\r\n   * @param {String} type Can be multiple, separated by space.\r\n   * @param {Function} listener\r\n   * @param {Boolean} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {DOMElement} target\r\n   * @param {String} type\r\n   * @param {Function} listener\r\n   * @param {Boolean} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {DOMElement} target\r\n   * @param {String} type\r\n   * @param {Function} listener\r\n   * @param {Boolean} passive\r\n   * @param {Boolean} unbind Whether the event should be added or removed\r\n   * @param {Boolean} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = (unbind ? 'remove' : 'add') + 'EventListener';\r\n    type = type.split(' ');\r\n    type.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n", "export function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {String}  prop 'left', 'top', 'bottom', 'right'\r\n * @param {Object}  options PhotoSwipe options\r\n * @param {Object}  viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {Object}  itemData Data about the slide\r\n * @param {Integer} index Slide index\r\n * @returns {Number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    if (options[legacyPropName]) {\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n", "/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nimport {\r\n  clamp\r\n} from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\nclass PanBounds {\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    this.center = {};\r\n    this.max = {};\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  // _getItemBounds\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  // _calculateItemBoundsForAxis\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {String} axis x or y\r\n   * @param {Object} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n", "/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\n\r\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {Object} options PhotoSwipe options\r\n   * @param {Object} itemData Slide data\r\n   * @param {Integer} index Slide index\r\n   * @param {PhotoSwipe|undefined} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @param {Mixed} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // zoom.initial\r\n    // zoom.secondary\r\n    // zoom.max\r\n    const optionValue = this.options[optionPrefix + 'ZoomLevel'];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @return {Number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @return {Number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @return {Number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n", "/**\r\n * Renders and allows to control a single slide\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\nclass Slide {\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    this.width = this.content.width;\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {Boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      this.holderElement.innerHTML = '';\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.container.transformOrigin = '0 0';\r\n\r\n    this.load();\r\n    this.appendHeavy();\r\n    this.updateContentSize();\r\n\r\n    this.holderElement.innerHTML = '';\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {Boolean} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param  {Number} destZoomLevel      Destination zoom level.\r\n   * @param  {Object|false} centerPoint  Transform origin center point,\r\n   *                                     or false if viewport center should be used.\r\n   * @param  {Number} transitionDuration Transition duration, may be set to 0.\r\n   * @param  {Boolean|null} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {Boolean|null}              Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {Number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {String} axis\r\n   * @param {Object|null} centerPoint point based on which zoom is performed,\r\n   *                                  usually refers to the current mouse position,\r\n   *                                  if false - viewport center will be used.\r\n   * @param {Number|null} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {Number} panX\r\n   * @param {Number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @param {Number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {Number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n", "/**\r\n * Handles single pointer dragging\r\n */\r\n\r\nimport {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\nclass DragHandler {\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @param {String} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @param {Number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @param {String} axis\r\n   * @param {Number} potentialPan\r\n   * @param {Number|null} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n", "import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    this._startPan = {};\r\n\r\n    this._startZoomPoint = {};\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {Boolean} ignoreGesture Wether gesture coordinates should be ignored\r\n   *                                when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n", "/**\r\n * Tap, double-tap handler.\r\n */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {Event} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(event.target.closest('.pswp__container'));\r\n}\r\n\r\nclass TapHandler {\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n\r\n  click(point, originalEvent) {\r\n    const targetClassList = originalEvent.target.classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const optionValue = pswp.options[actionName + 'Action'];\r\n\r\n    if (pswp.dispatch(actionName + 'Action', { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n", "/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nimport {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\nclass Gestures {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    this.p1 = {}; // the first pressed pointer\r\n    this.p2 = {}; // the second pressed pointer\r\n    this.prevP1 = {};\r\n    this.prevP2 = {};\r\n    this.startP1 = {};\r\n    this.startP2 = {};\r\n    this.velocity = {};\r\n\r\n    this._lastStartP1 = {};\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @param {Number} axis\r\n   * @param {Number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @param {Event} e\r\n   * @param {String} pointerType Normalized pointer type ('up', 'down' or 'move')\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === e.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(e, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(e, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      this._numActivePoints = 0;\r\n      if (e.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (e.touches && e.touches.length > 0) {\r\n          this._convertEventPosToPoint(e.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (e.touches.length > 1) {\r\n            this._convertEventPosToPoint(e.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(e, this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted \u2013 direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @param {Event} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    // e.pointerId can be zero\r\n    if (e.pointerId !== undefined) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n", "/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nimport {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {Boolean} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {Integer} diff\r\n   * @returns {Boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    pswp.currSlide.applyCurrentZoomPan();\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {Number} x\r\n   * @param {Boolean} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    let newSlideIndexOffset;\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n", "/**\r\n *\r\n * keyboard.js\r\n *\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n *\r\n */\r\n\r\nimport { specialKeyUsed } from './util/util.js';\r\n\r\nclass Keyboard {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = document.activeElement;\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    let keydownAction;\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {Event} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(e.target)) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n", "/**\r\n * Runs CSS transition.\r\n */\r\n\r\nimport { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\nclass CSSAnimation {\r\n  // onComplete can be unpredictable, be careful about current state\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    this._target = target;\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // \u00AF\\_(\u30C4)_/\u00AF\r\n    this._firstFrameTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._firstFrameTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._firstFrameTimeout) {\r\n      clearTimeout(this._firstFrameTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n", "/**\r\n * Spring easing helper\r\n */\r\n\r\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\nclass SpringEaser {\r\n  /**\r\n   * @param {Number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {Number} dampingRatio Determines how bouncy animation will be.\r\n   *                              From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   *                              \"overshoot\" refers to part of animation that\r\n   *                              goes beyond the final value.\r\n   *\r\n   * @param {Number} naturalFrequency Determines how fast animation will slow down.\r\n   *                                  The higher value - the stiffer the transition will be,\r\n   *                                  and the faster it will slow down.\r\n   *                                  Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Number} deltaPosition Difference between current and end position of the animation\r\n   * @param {Number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {Number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n", "import SpringEaser from './spring-easer.js';\r\n\r\nclass SpringAnimation {\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    this._onFinish = onFinish;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n", "import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/**\r\n * Manages animations\r\n */\r\n\r\nclass Animations {\r\n  constructor() {\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  _start(props, isSpring) {\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n", "/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n", "import { createElement } from '../util/util.js';\r\n\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  out = out.split('%d').join(svgData.size || 32); // replace all %d with size\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = tagName.toLowerCase();\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        element.type = 'button';\r\n      }\r\n\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        element.title = pswp.options[name + 'Title'];\r\n      } else if (data.title) {\r\n        element.title = data.title;\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', false, pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(element);\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n", "/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        element.disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        element.disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n", "const closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n", "const zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n", "export const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    let isVisible;\r\n    let delayTimeout;\r\n\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\r\n", "export const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n", "import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {Boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n    const secondaryIsHigher = (currZoomLevelDiff < 0);\r\n\r\n    if (currZoomLevel === currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, secondaryIsHigher);\r\n    } else if (currZoomLevel > currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, true);\r\n    } else {\r\n      //  if (currZoomLevel < currSlide.zoomLevels.secondary)\r\n      setZoomedIn(template, false);\r\n    }\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n", "function getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  // Coordinates of the image,\r\n  // as if it was not cropped,\r\n  // height is calculated automatically\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {Integer} index\r\n * @param {Object} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns Object|undefined\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  if (event.thumbBounds) {\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.w,\r\n        itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n", "/**\r\n * Base PhotoSwipe event object\r\n */\r\nclass PhotoSwipeEvent {\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    this._listeners = {};\r\n    this._filters = {};\r\n  }\r\n\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = new PhotoSwipeEvent(name, details);\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n", "import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {String|false} imageSrc\r\n   * @param {Element} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      this.element.decoding = 'async';\r\n      this.element.alt = '';\r\n      this.element.src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n", "import { createElement, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\nclass Content {\r\n  /**\r\n   * @param {Object} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {Slide|undefined} slide Slide that requested the image,\r\n   *                                can be undefined if image was requested by something else\r\n   *                                (for example by lazy-loader)\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {Boolean} isLazy\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.loadImage(isLazy);\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {Boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    this.element = createElement('pswp__img', 'img');\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.data.srcset) {\r\n      this.element.srcset = this.data.srcset;\r\n    }\r\n\r\n    this.element.src = this.data.src;\r\n\r\n    this.element.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (this.element.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      this.element.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      this.element.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.slide.container.innerHTML = '';\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const image = this.element;\r\n      // Handle srcset sizes attribute.\r\n      //\r\n      // Never lower quality, if it was increased previously.\r\n      // Chrome does this automatically, Firefox and Safari do not,\r\n      // so we store largest used size in dataset.\r\n      if (image.srcset\r\n          && (!image.dataset.largestUsedSize || width > image.dataset.largestUsedSize)) {\r\n        image.sizes = width + 'px';\r\n        image.dataset.largestUsedSize = width;\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   *\r\n   * @param {Boolean} isLazy\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerHTML = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      if (this.slide\r\n          && !this.slide.isActive\r\n          && ('decode' in this.element)) {\r\n        this.isDecoding = true;\r\n        // Make sure that we start decoding on the next frame\r\n        requestAnimationFrame(() => {\r\n          // element might change\r\n          if (this.element && this.element.tagName === 'IMG') {\r\n            this.element.decode().then(() => {\r\n              this.isDecoding = false;\r\n              requestAnimationFrame(() => {\r\n                this.appendImage();\r\n              });\r\n            }).catch(() => {\r\n              this.isDecoding = false;\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        if (this.placeholder\r\n          && (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR)) {\r\n          this.removePlaceholder();\r\n        }\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n\r\n      if (this.placeholder\r\n        && (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR)) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n", "/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nimport Eventable from './eventable';\r\nimport {\r\n  getElementsFromOption\r\n} from '../util/util.js';\r\nimport Content from '../slide/content';\r\n\r\n\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if (dataSource.length) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource.gallery) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {Integer} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallerySelecor and childSelector options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {Element} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {Element} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = element.tagName === 'A' ? element : element.querySelector('a');\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    this.applyFilters('domItemData', itemData, element, linkEl);\r\n\r\n    return itemData;\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n", "/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\n\r\nimport {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\nclass Opener {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = MIN_OPACITY;\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = MIN_OPACITY;\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = MIN_OPACITY;\r\n        }\r\n        pswp.element.style.opacity = 1;\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = MIN_OPACITY;\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(this._placeholder).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch('initialZoom' + (this.isOpening ? 'In' : 'Out'));\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = 1;\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'));\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', pswp.options.bgOpacity);\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', 1);\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', 0);\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', 0);\r\n    }\r\n  }\r\n\r\n  _setClosedStateZoomPan(animate) {\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} target\r\n   * @param {String} prop\r\n   * @param {String} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n", "import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {Object} itemData Data about the slide\r\n * @param {PhotoSwipeBase}  instance PhotoSwipe or PhotoSwipeLightbox\r\n * @param {Integer} index\r\n * @returns {Object|Boolean} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  const viewportSize = instance.viewportSize || getViewportSize(options);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {Integer} index Slide index\r\n * @param {Object}  instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {Integer} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {Integer} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n", "import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    // offset of viewport relative to document\r\n    this.offset = {};\r\n\r\n    this._prevViewportSize = {};\r\n\r\n    // Size of scrollable PhotoSwipe viewport\r\n    this.viewportSize = {};\r\n\r\n    // background (backdrop) opacity\r\n    this.bgOpacity = 1;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', this.currIndex, this._initialItemData, true);\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {Integer} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param  {Integer} New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {Integer} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {Object} holder mainScroll.itemHolders array item\r\n   * @param {Integer} index Slide index\r\n   * @param {Boolean} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param  {Boolean} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = this.bgOpacity * this.options.bgOpacity;\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', -1);\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n"],
  "mappings": "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",
  "names": []
}
